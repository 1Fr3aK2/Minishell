erros parsing quotes : 
echo "texto" 'outro "texto'; -> corrigido
echo `yes "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"` -> POR CORRIGIR
echo "Aspas duplas\" escapadas dentro de um texto" -> POR CORRIGIR
echo "Mistura de aspas """" dentro de "um" texto 'estranho'" -> corrigido
echo '"Aspas dentro de aspas" dentro de aspas' -> corrigido
echo '""Aspas dentro de aspas"" dentro de aspas' -> corrigido
echo "Texto com 'aspas simples' dentro de aspas duplas" -> corrigido
echo 'Texto com "aspas duplas" dentro de aspas simples' -> corrigido
echo "Texto com 'aspas simples' e "mistura" de "aspas duplas"" -> corrigido
echo 'Texto com "aspas duplas" e '"mistura"' de 'aspas simples' dentro' -> corrigido
\\\\\\\
echo `pwd` asdasd
/home/raamorim/commoncore/Shellinho asdasd
echo & asdasd
[1] 68519
[1]  + 68519 done       echo
zsh: command not found: asdasd

CORRIGIR TESTES


echo "O meu user é $USER e estou em $PWD" -> correto : O meu user é rafael e estou em /home/rafael
echo "$HOME$USER" -> correto : /home/rafaelrafael
echo "$HOME$NAO_EXISTE" -> correto : /home/rafael
echo "User: $USER, Desconhecido: $NAO_EXISTE" -> correto : User: rafael, Desconhecido:

echo $123ABC -> bash -> 23ABC
            -> zsh -> zsh: command not found: 23ABC
            outros(nos) -> \n 

echo $HOME!USER -> bash -> bash: !USER: event not found
                -> ZSH -> zsh: event not found: USER
                outros(nos) -> /home/rafael!USER


echo "'$HOME'" -> correto -> '/home/rafael'
echo "asd"'$HOME'"asd" -> asd$HOMEasd
 echo "Inicio"'$PWD'"Fim" -> Inicio$PWDFim


estas aspas -> (``) -> usadas para executar comandos


//TO do

NORMINETE
ls | exit 5555555

shellinho$> wc -l || cat t.txt 
^\
Quit (core dumped)

shellinho$> cat << eof && echo ola
> eof -> 2 fds abertos


cat << eof | wc -l >> t.txt -> ver quantas linhas conta

exit asd -> fd aberto do pai



void	ft_pipe_wrapper(t_info *info)
{
	if (!info || !info->cmd_tree)
		return ;
	/*prepare_heredocs(info->cmd_tree, info); // descomentar isto pode ser a cena dos stdin mal restaurados
	if (info->exit_status == 130)
		return ;*/
	ft_pipe(info, info->cmd_tree);
}

static void	child_exec(t_info *info, t_tree *node, int in, int out)
{
	if (node->type == CMD) // apagar isto....
	{
		process_heredoc_args(node, info);
		if (info->exit_status == 130)
			exit(130);
	}
	if (info->io && info->io->stdin_is_heredoc && info->io->fd_in != -1)
	{
		dup2(info->io->fd_in, STDIN_FILENO);
		close(info->io->fd_in);
	}
	else if (in != -1)
	{
		dup2(in, STDIN_FILENO);
		close(in);
	}
	if (out != -1)
	{
		dup2(out, STDOUT_FILENO);
		close(out);
	}
	close_fds(0);
	exec_command(info, node);
	exit(1);
}